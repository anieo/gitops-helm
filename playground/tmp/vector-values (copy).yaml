# Default values for vector-agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Additional labels to add to all resources
# commonLabels:
#   app.kubernetes.io/component: agent

secrets:
  generic: {}
    # Each Key/Value will be added to a Secret resource
    # Values should be entered base64 encoded (examples below are "REPLACE_ME" encoded)
    # NOTE: Don't commit unencrypted secrets to git!
    # awsAccessKeyId: "UkVQTEFDRV9NRQo="
    # awsSecretAccessKey: "UkVQTEFDRV9NRQo="

image:
  repository: timberio/vector
  pullPolicy: IfNotPresent
  # Overrides the image tag, the default is `{image.version}-{image.base}`.
  tag: ""
  # Overrides the image version, the default is the Chart appVersion.
  version: ""
  base: "debian"

# Image pull secrets to use at the `Pod`s managed by `DaemonSet`.
imagePullSecrets: []
#  - myRegistryCredentialSecretName

# Command to use at the pods managed by DaemonSet
command: []

# Override the chart name used in templates.
nameOverride: ""
# Override the full chart name (name prefixed with release name) used in
# templates.
fullnameOverride: ""

updateStrategy: RollingUpdate
# Only used when updateStrategy is set to "RollingUpdate".
maxUnavailable: 1

# Use Liveness Probe (The Probe is using API endpoint which is disabled by default.
# You have to enable the API in the Config to expose the endpoint.)
livenessProbe: {}
  # httpGet:
  #   path: /health
  #   port: api

# Use Readyness Probe (The Probe is using API endpoint which is disabled by default.
# You have to enable the API in the Config to expose the endpoint.)
readinessProbe: {}
  # httpGet:
  #   path: /health
  #   port: api

# Change DNS Policy
dnsPolicy:

# Custom DNS configuration to be added to vector-agent pods
dnsConfig: {}
  # nameservers:
  #   - 1.2.3.4
  # searches:
  #   - ns1.svc.cluster-domain.example
  #   - my.dns.search.suffix
  # options:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0

# Deploy a service resource to use Topology-aware traffic routing with topology keys.
service:
  # Whether to create service resource or not.
  enabled: false
  annotations: {}
  type: ClusterIP
  topologyKeys: {}
  # List of valid topologyKeys values.
  #   - "kubernetes.io/hostname"
  #   - "topology.kubernetes.io/zone"
  #   - "topology.kubernetes.io/region"
  #   - "*"
  ports:
    - name: api
      port: 8686
      protocol: TCP
      targetPort: 8686
    # Additional ports (Vector sources, etc.)
    # - name: another_port
    #   port: 8081
    #   protocol: TCP
    #   targetPort: 8081

serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Annotations to add to the service account.
  annotations: {}
  # The name of the service account to use.
  # If not set and `create` is true, a name is generated using the `fullname`
  # template.
  name: ""
  # Automount API credentials for a service account.
  automountServiceAccountToken: true

# Add an annotation to the `Pod`s managed by `DaemonSet` with a random value,
# generated at Helm Chart template evaluation time.
# Enabling this will cause the `Pod`s to be recreated every time the value
# changes - effectively restarting them on each update.
podRollmeAnnotation: false

# Add an annotation to the `Pod`s managed by `DaemonSet` with a checksum of
# the Helm release values (as in `values.yaml` content and `--set` flags).
# Enabling this will cause the `Pod`s to be recreated every time values
# change.
podValuesChecksumAnnotation: false

# Annotations to add to the `Pod`s managed by `DaemonSet`.
podAnnotations: {}

# Labels to add to the `Pod`s managed by `DaemonSet`.
podLabels: {}

# Priority class name to add to the `Pod`s managed by `DaemonSet`.
podPriorityClassName: ""

# PodSecurityContext to set at the `Pod`s managed by `DaemonSet`.
podSecurityContext: {}
  # fsGroup: 2000

# Security context to set at the `vector` container at the `Pod`s managed by
# `DaemonSet`.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Extra env vars to pass to the `vector` container.
env: []
  # - name: AWS_ACCESS_KEY_ID
  #   valueFrom:
  #     secretKeyRef:
  #       name: vector-agent
  #       key: awsAcessKeyId

# Extra arguments to pass to the `vector` container.
args: []
  # - --quiet
  # - --verbose

# Tolerations to set for the `Pod`s managed by `DaemonSet`.
tolerations:
  # This toleration is to have the `DaemonSet` runnable on master nodes.
  # Remove it if your masters can't run pods.
  - key: node-role.kubernetes.io/master
    effect: NoSchedule

# Various tweakables for the `Pod`s managed by `DaemonSet`.
resources: {}
nodeSelector: {}
affinity: {}

# Additional container ports to pass to the `vector` container of the `Pod`s
# managed by `DaemonSet`.
extraContainersPorts: []

# Additional sources to include at the `config-dir` projection of the `Pod`s
# managed by `DaemonSet`.
extraConfigDirSources: []

# Additional volumes to pass to the `Pod`s managed by `DaemonSet`.
extraVolumes: []

# Additional volume mounts to pass to the `vector` container of the `Pod`s
# managed by `DaemonSet`.
extraVolumeMounts: []

# Vector will store it's data here.
dataVolume:
  hostPath:
    path: /var/lib/vector/

rbac:
  # Whether to create rbac resources or not. Disable for non-rbac clusters.
  enabled: true

psp:
  # Whether to create `PodSecurityPolicy` or not.
  enabled: false

# Set this to non-empty value to use existing `ConfigMap` for `vector`, instead
# of using a generated one.
existingConfigMap: ""

# Specify custom contents for the Vector config
# ref: https://vector.dev/docs/reference/configuration/
# Note a complete and valid configuration is required. If used, the deprecated
# configuration keys will be ignored. More information can be found at:
# https://vector.dev/highlights/2021-07-13-helm-customconfig
customConfig: 
  log_schema:
    host_key: host
    message_key: message
    source_type_key: source_type
    timestamp_key: timestamp
  sources:
    # var_logs:
    #   type : file
    #   ignore_older_secs : 600
    #   include : [ "/var/log/*.log" ]
    #   read_from : "beginning"


    # containers_log:
    #   type: "docker_logs"
    #   include_images : [ "httpd" , "busybox"]
    #   docker_host : "/var/docker.sock"
    kube_log:
      type: "kubernetes_logs"
      data_dir: "/var/lib/vector"
      timezone: "local"
      exclude_paths_glob_patterns:
      - "**/exclude/**"

  sinks:
    loki:
      type: loki
      inputs : ["kube_log"]
      endpoint : "http://loki:3100"
      # compression : "none"
      encoding:
        codec : "json"
      labels: 
        component_id : |-
          {{ print "{{ container_name }}" }}
        job: container_log
        foo: bar
        pod_name: |- 
          {{print "{{ kubernetes.pod_name }}"}}
        container_name: |-
          {{print "{{ kubernetes.container_name }}"}}
        host: |-
          {{ print "{{ host }}" }}
        source: |-
          {{ print "{{ source_type }}" }}
        stream: |-
          {{ print "{{ stream }}" }}
  #  data_dir: "/vector-data-dir"
  #  sources:
  #    host_metrics:
  #      type: host_metrics
  #      filesystem:
  #        devices:
  #          excludes: ["binfmt_misc"]
  #        filesystems:
  #          excludes: ["binfmt_misc"]
  #        mountpoints:
  #          excludes: ["*/proc/sys/fs/binfmt_misc"]
  #    internal_metrics:
  #      type: internal_metrics
  #    kubernetes_logs:
  #      type: kubernetes_logs
  #  sinks:
  #    prometheus_sink:
  #      type: prometheus_exporter
  #      inputs: ["host_metrics", "internal_metrics"]
  #      address: 0.0.0.0:9090

# Use prometheus-operator `PodMonitor` to opt-in for Prometheus scraping.
# To be used in clusters that rely on prometheus-operator to gather metrics.
# You might want to set `podMonitorSelectorNilUsesHelmValues=false` if you're
# using prometheus-operator Helm chart to allow `PodMonitor` resources
# dicovery in all namespaces.
podMonitor:
  # Whether to add the `PodMonitor` resource or not.
  # `prometheus-operator` CRDs are necessary, otherwise you'll get an error.
  enabled: false
  # Additional labels for PodMonitor
  additionalLabels: {}
  # Additional relabelings to include in the `PodMonitor`.
  extraRelabelings: []
  # metricRelabelings to include in the `PodMonitor`.
  metricRelabelings: []

# Global parts of the generated `vector` config.
# DEPRECATED. Use customConfig instead
globalOptions:
  # Specifies the (in-container) data dir used by `vector`.
  dataDir: "/vector-data-dir"

# Schema part of the generated `vector` config.
# DEPRECATED. Use customConfig instead
logSchema:
  hostKey: "host"
  messageKey: "message"
  sourceTypeKey: "source_type"
  timestampKey: "timestamp"

# The Vector API.
# Will be disabled by default.
# DEPRECATED. Use customConfig instead
vectorApi:
  # Turn the Vector API on or off.
  enabled: false
  # The address to listen at.
  address: "0.0.0.0:8686"
  # Enable or disable the built-in GraphQL Playground (a web IDE for working on GraphQL queries).
  playground: true

# The "built-in" kubernetes logs source to collect logs from the `Pod`s running
# on the `Node`.
# Will be added by default, unless explicitly disabled.
# DEPRECATED. Use customConfig instead
kubernetesLogsSource:
  # Disable to omit the kubernetes logs source from being added.
  enabled: true
  # The name to use for the "built-in" kubernetes logs source.
  sourceId: kubernetes_logs
  # Additional config to embed at the kubernetes logs source.
  config: {}
    # option: "value"
  # Raw TOML config to embed at the kubernetes logs source (deprecated).
  rawConfig: null

# The "built-in" vector sink, to send the logs to the vector aggregator.
# Disabled by default when using `vector-agent` chart.
# Enabled by default when using `vector` chart, and automatically configured.
# DEPRECATED. Use customConfig instead
vectorSink:
  # Disable to omit the vector sink from being added.
  enabled: false
  # The name to use for the "built-in" vector sink.
  sinkId: vector_sink
  # Inputs of the built-in vector sink.
  inputs: null  # ["my_input_1", "my_input_2"]
  # The host of the Vector to send the data to.
  host: null  # "vector.internal"
  # The port of the Vector to send the data to.
  port: null  # 9000
  # Additional config to embed at the vector sink.
  config: {}
    # option: "value"
  # Raw TOML config to embed at the vector sink (deprecated).
  rawConfig: null

# The "built-in" internal metrics source emitting Vector's internal opertaional
# metrics.
# DEPRECATED. Use customConfig instead
internalMetricsSource:
  # Disable to omit the internal metrics source from being added.
  enabled: true
  # The name to use for the "built-in" internal metrics source.
  sourceId: internal_metrics
  # Additional config to embed at the internal metrics source.
  config: {}
    # option: "value"
  # Raw TOML config to embed at the internal metrics source (deprecated).
  rawConfig: null

# The "built-in" host metrics source emitting the metrics gathered from the node
# that Vector is executing on.
# DEPRECATED. Use customConfig instead
hostMetricsSource:
  # Disable to omit the host metrics source from being added.
  enabled: true
  # The name to use for the "built-in" host metrics source.
  sourceId: host_metrics
  # Additional config to embed at the host metrics source.
  config:
    filesystem:
      devices:
        excludes: [binfmt_misc]
      filesystems:
        excludes: [binfmt_misc]
      mountpoints:
        excludes: ["*/proc/sys/fs/binfmt_misc"]
    # option: "value"
  # Raw TOML config to embed at the host metrics source (deprecated).
  rawConfig: null

# The "built-in" prometheus sink exposing metrics in the Prometheus scraping
# format.
# When using this "built-in" sink, we automatically configure container ports,
# and ensure things are ready for discovery and scraping via Prometheus'
# `kubernetes_sd_configs` jobs.
# DEPRECATED. Use customConfig instead
prometheusSink:
  # Disable to omit the prometheus sink from being added.
  enabled: true
  # The name to use for the "built-in" prometheus sink.
  sinkId: prometheus_sink
  # Inputs of the built-in prometheus sink.
  # If you have built-in internal metrics source enabled, we'll add it as a
  # input here under the hood, so you don't have to pass it here.
  # Unless `excludeInternalMetrics` is set to `true`, in which case you're
  # responsible of wiring up the internal metrics.
  inputs: []
  # Set this to `true` to opt-out from automatically adding the built-in
  # internal metrics source to the inputs.
  excludeInternalMetrics: false
  # The address to listen at.
  listenAddress: "0.0.0.0"
  # The port to listen at.
  listenPort: "9090"
  # Additional config to embed at the prometheus sink.
  config: {}
    # option: "value"
  # Raw TOML config to embed at the prometheus sink (deprecated).
  rawConfig: null
  # Add Prometheus annotations to Pod to opt-in for Prometheus scraping.
  # To be used in clusters that rely on Pod annotations in the form of
  # `prometheus.io/scrape` to discover scrape targets.
  addPodAnnotations: false
  # Use prometheus-operator `PodMonitor` to opt-in for Prometheus scraping.
  # To be used in clusters that rely on prometheus-operator to gather metrics.
  # You might want to set `podMonitorSelectorNilUsesHelmValues=false` if you're
  # using prometheus-operator Helm chart to allow `PodMonitor` resources
  # dicovery in all namespaces.
  podMonitor:
    # Whether to add the `PodMonitor` resource or not.
    # `prometheus-operator` CRDs are necessary, otherwise you'll get an error.
    enabled: false
    # Additional labels for PodMonitor
    additionalLabels: {}
    # Additional relabelings to include in the `PodMonitor`.
    extraRelabelings: []
    # metricRelabelings to include in the `PodMonitor`.
    metricRelabelings: []

# Sources to add to the generated `vector` config (besides "built-in" kubernetes
# logs source).
# DEPRECATED. Use customConfig instead
sources: {}
  # source_name:
  #   type: "source_type"
  #   option: "value"
  #   rawConfig: |
  #     option = "value"

# Transforms to add to the generated `vector` config.
# DEPRECATED. Use customConfig instead
transforms: {}
  # transform_name:
  #   type: "transform_type"
  #   inputs: ["input1", "input2"]
  #   option: "value"
  #   rawConfig: |
  #     option = "value"

# Sinks to add to the generated `vector` config.
# DEPRECATED. Use customConfig instead
sinks: {}
  # sink_name:
  #   type: "sink_type"
  #   inputs: ["input1", "input2"]
  #   option: "value"
  #   rawConfig: |
  #     option = "value"